#include <_Teensy.h>

// SmartLED Shield for Teensy 4 (V5) 
// + touch sensor
#include <MatrixHardware_Teensy4_ShieldV5.h>
#include <SmartMatrix.h>
// #define 

#define COLOR_DEPTH 24
const uint16_t WIDTH = 32;
const uint16_t HEIGHT = 32;
const uint8_t kRefreshDepth = 24;
const uint8_t kDmaBufferRows = 4;
const uint8_t kPanelType = SM_PANELTYPE_HUB75_16ROW_MOD8SCAN;
const uint32_t kMatrixOptions = (SM_HUB75_OPTIONS_NONE);
const uint8_t kBackgroundLayerOptions = (SM_HUB75_OPTIONS_MATRIXCALC_LOWPRIORITY);

SMARTMATRIX_ALLOCATE_BUFFERS(matrix, WIDTH, HEIGHT, kRefreshDepth, kDmaBufferRows, kPanelType, kMatrixOptions);
SMARTMATRIX_ALLOCATE_BACKGROUND_LAYER(bg, WIDTH, HEIGHT, COLOR_DEPTH, kBackgroundLayerOptions);
 
// Sensor
unsigned long previousMillis = 0;
unsigned long elapsedMillis = 0;
int ledState = LOW;

int r;
int g;
int b1;

void setup() {

  pinMode(24, INPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);
  Serial.setTimeout(50);

//LED Matrix
  matrix.addLayer(&bg);
  matrix.begin();
  matrix.setBrightness(150);
  bg.fillScreen({0, 0, 0}); 
  
  
}

//
uint frame = 0;

void loop() {

    bg.swapBuffers(true); 
    frame++;

    //sensor
    elapsedMillis = millis() - previousMillis;


    if (digitalRead(24) == false){
      r = random(0, 255);
      g = random(0, 255);
      b1 = random(0, 200);


      //try something here

      matrix.setBrightness(150);
      bg.fillScreen({r, g, b1});
      delay(8000);
      // matrix.setBrightness(0);
      // //set to ten before final upload
      // delay(2000);


      // drawPixel(WIDTH/2 - 1, HEIGHT/2 + 1, {255,255,255} );
      // drawPixel(WIDTH/2 - 2, HEIGHT/2 + 2, {255,255,255} );
      // drawPixel(WIDTH/2 - 3, HEIGHT/2 + 3, {255,255,255} );
      // drawPixel(WIDTH/2 - 4, HEIGHT/2 + 4, {255,255,255} );
      // drawPixel(WIDTH/2, HEIGHT/2, {255,255,255} );
      // drawPixel(WIDTH/2 + 1, HEIGHT/2 - 1, {255,255,255} );
      // drawPixel(WIDTH/2 + 2, HEIGHT/2 - 2, {255,255,255} );
      // drawPixel(WIDTH/2 + 3, HEIGHT/2 - 3, {255,255,255} );
      // drawPixel(WIDTH/2 + 4, HEIGHT/2 - 4, {255,255,255} );


      // for A
      drawPixel(WIDTH/2 - 1, HEIGHT/2 + 1, {0,0,0} );
      drawPixel(WIDTH/2 - 2, HEIGHT/2 + 2, {0,0,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 + 3, {0,0,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 + 4, {0,0,0} );
      drawPixel(WIDTH/2 - 5, HEIGHT/2 + 5, {0,0,0} );
      drawPixel(WIDTH/2 - 6, HEIGHT/2 + 6, {0,0,0} );
      drawPixel(WIDTH/2 - 7, HEIGHT/2 + 7, {0,0,0} );
      drawPixel(WIDTH/2, HEIGHT/2, {0,0,0} );
      drawPixel(WIDTH/2 + 1, HEIGHT/2 - 1, {0,0,0} );
      drawPixel(WIDTH/2 + 2, HEIGHT/2 - 2, {0,0,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 - 3, {0,0,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 - 4, {0,0,0} );
      drawPixel(WIDTH/2 + 5, HEIGHT/2 - 5, {0,0,0} );
      drawPixel(WIDTH/2 + 6, HEIGHT/2 - 6, {0,0,0} );
      drawPixel(WIDTH/2 + 7, HEIGHT/2 - 7, {0,0,0} );

      drawPixel(WIDTH/2 - 1, HEIGHT/2 - 1, {0,0,0} );
      drawPixel(WIDTH/2 - 2, HEIGHT/2 - 2, {0,0,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 3, {0,0,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 - 4, {0,0,0} );
      drawPixel(WIDTH/2 - 5, HEIGHT/2 - 5, {0,0,0} );
      drawPixel(WIDTH/2 - 6, HEIGHT/2 - 6, {0,0,0} );
      drawPixel(WIDTH/2 - 7, HEIGHT/2 - 7, {0,0,0} );
      drawPixel(WIDTH/2, HEIGHT/2, {0,0,0} );
      drawPixel(WIDTH/2 + 1, HEIGHT/2 + 1, {0,0,0} );
      drawPixel(WIDTH/2 + 2, HEIGHT/2 + 2, {0,0,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 3, {0,0,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 + 4, {0,0,0} );
      drawPixel(WIDTH/2 + 5, HEIGHT/2 + 5, {0,0,0} );
      drawPixel(WIDTH/2 + 6, HEIGHT/2 + 6, {0,0,0} );
      drawPixel(WIDTH/2 + 7, HEIGHT/2 + 7, {0,0,0} );

      drawPixel(WIDTH/2 - 4, HEIGHT/2 + 3, {0,0,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 + 2, {0,0,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 + 1, {0,0,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2, {0,0,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 - 1, {0,0,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 - 2, {0,0,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 - 3, {0,0,0} );

      drawPixel(WIDTH/2 + 4, HEIGHT/2 + 3, {0,0,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 + 2, {0,0,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 + 1, {0,0,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2, {0,0,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 - 1, {0,0,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 - 2, {0,0,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 - 3, {0,0,0} );


      // For U

      drawPixel(WIDTH/2 - 7, HEIGHT/2 + 3, {200,100,0} );
      drawPixel(WIDTH/2 - 7, HEIGHT/2 + 2, {200,100,0} );
      drawPixel(WIDTH/2 - 7, HEIGHT/2 + 1, {200,100,0} );
      drawPixel(WIDTH/2 - 7, HEIGHT/2, {200,100,0} );
      drawPixel(WIDTH/2 - 7, HEIGHT/2 - 1, {200,100,0} );
      drawPixel(WIDTH/2 - 7, HEIGHT/2 - 2, {200,100,0} );
      drawPixel(WIDTH/2 - 7, HEIGHT/2 - 3, {200,100,0} );

      drawPixel(WIDTH/2 + 7, HEIGHT/2 + 3, {200,100,0} );
      drawPixel(WIDTH/2 + 7, HEIGHT/2 + 2, {200,100,0} );
      drawPixel(WIDTH/2 + 7, HEIGHT/2 + 1, {200,100,0} );
      drawPixel(WIDTH/2 + 7, HEIGHT/2, {200,100,0} );
      drawPixel(WIDTH/2 + 7, HEIGHT/2 - 1, {200,100,0} );
      drawPixel(WIDTH/2 + 7, HEIGHT/2 - 2, {200,100,0} );
      drawPixel(WIDTH/2 + 7, HEIGHT/2 - 3, {200,100,0} );      

      drawPixel(WIDTH/2 + 1, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 + 2, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 + 5, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 + 6, HEIGHT/2 + 4, {200,100,0} );

      drawPixel(WIDTH/2 + 1, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 + 2, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 + 5, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 + 6, HEIGHT/2 - 4, {200,100,0} );

      drawPixel(WIDTH/2 - 1, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 - 2, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 - 5, HEIGHT/2 + 4, {200,100,0} );
      drawPixel(WIDTH/2 - 6, HEIGHT/2 + 4, {200,100,0} );

      drawPixel(WIDTH/2 - 1, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 - 2, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 - 5, HEIGHT/2 - 4, {200,100,0} );
      drawPixel(WIDTH/2 - 6, HEIGHT/2 - 4, {200,100,0} );

      
      //FOR R
      drawPixel(WIDTH/2 - 3, HEIGHT/2 + 3, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 + 2, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 + 1, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 1, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 2, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 3, {100,150,0} );

      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 3, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 2, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 1, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 - 1, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 - 2, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 - 3, {100,150,0} );

      drawPixel(WIDTH/2 + 1, HEIGHT/2 - 4, {100,150,0} );
      drawPixel(WIDTH/2 + 2, HEIGHT/2 - 5, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 - 6, {100,150,0} );
      drawPixel(WIDTH/2 + 4, HEIGHT/2 - 7, {100,150,0} );

      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 4, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 5, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 6, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 - 7, {100,150,0} );

      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 4, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 5, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 6, {100,150,0} );
      drawPixel(WIDTH/2 + 3, HEIGHT/2 + 7, {100,150,0} );

      drawPixel(WIDTH/2 - 1, HEIGHT/2 + 4, {100,150,0} );
      drawPixel(WIDTH/2 - 2, HEIGHT/2 + 5, {100,150,0} );
      drawPixel(WIDTH/2 - 3, HEIGHT/2 + 6, {100,150,0} );
      drawPixel(WIDTH/2 - 4, HEIGHT/2 + 7, {100,150,0} );

      // delay(1000);  
      // matrix.setBrightness(10);
    }

    
    if(digitalRead(24) == true)  {
      Serial.println("Touch");
      delay(5);
      digitalWrite(LED_BUILTIN, LOW);
      // bg.fillScreen({0, 0, 0});  // Clear to a color {r,g,b}
      matrix.setBrightness(200);
      float f = sin(frame * 0.001) * 10;
      for (int j = 0; j < HEIGHT; j++) {
        for (int i = 0; i < WIDTH; i++) {
          float d = sqrt(pow(15 - i, 2) + pow(15 - j, 2));
          int r = (int)((sin(d * f + frame * 0.05) * 0.25 + 0.5) * 90.0); 
          int g = (int)((sin(d * f + frame * 0.06) * 0.25 + 0.5) * 90.0);
          int b1 = (int)((sin(d * f + frame * 0.04) * 0.25 + 0.5) * 90.0);
        drawPixel(i, j, {r, g, b1});
        // delay(3000);
    }
  } 
  } 
}


  // //Pixels before touch (X) //With Delay
  // drawPixel(WIDTH/2 - 1, HEIGHT/2 - 1, {255,255,255} );
  // drawPixel(WIDTH/2 - 2, HEIGHT/2 - 2, {255,255,255} );
  // drawPixel(WIDTH/2, HEIGHT/2, {255,255,255} );
  // drawPixel(WIDTH/2 + 1, HEIGHT/2 + 1, {255,255,255} );
  // drawPixel(WIDTH/2 + 2, HEIGHT/2 + 2, {255,255,255} );

  // drawPixel(WIDTH/2 - 1, HEIGHT/2 + 1, {255,255,255} );
  // drawPixel(WIDTH/2 - 2, HEIGHT/2 + 2, {255,255,255} );
  // drawPixel(WIDTH/2, HEIGHT/2, {255,255,255} );
  // drawPixel(WIDTH/2 + 1, HEIGHT/2 - 1, {255,255,255} );
  // drawPixel(WIDTH/2 + 2, HEIGHT/2 - 2, {255,255,255} );

  // bg.swapBuffers(true); 
  // frame++;

  //   digitalWrite(LED_BUILTIN, HIGH);
  // } else {
  //   digitalWrite(LED_BUILTIN, LOW);
  // }
  
  // delay(250);

// ----------------------------------------------------------------------

void drawPixel(int x, int y, const rgb24 &color) {
  static uint8_t y_map[] = {
    0, 1, 2, 3, 4, 5, 6, 7,          // first 8 rows are ok
    16, 17, 18, 19, 20, 21, 22, 23,  // swap these rows
    8, 9, 10, 11, 12, 13, 14, 15,    // ... with these
    24, 25, 26, 27, 28, 29, 30, 31   // last 8 rows are ok
  };
  bg.drawPixel(x, y_map[y], color);
  // bg.drawPixel(y, y_map[x], color);

}
